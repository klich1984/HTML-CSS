html {
	box-sizing: border-box;
	font-size: 16px;
	font-family: sans-serif;
	scroll-behavior: smooth;
}

*,
*::after,
*::before {
	box-sizing: inherit;
}

a[href="#top"] {
	margin: 1rem;
	display: block;
	font-size: 2rem;
	text-align: center;
	text-decoration: none;
}

p {
	margin: 0;
}

h2 {
	margin-top: 50vh;
	text-align: center;
}

img {
	margin: auto;
	display: block;
	max-width: 100%;
	height: auto;
}

.menu {
	margin-bottom: 100vh;
	font-size: 125%;
}

.menu li {
	margin-bottom: 1rem;
}

.container {
	margin: 0 auto;
	width: 80%;
	height: 80vh;
	background-color: #222;
	border: medium solid #000;
}

.item {
	padding: 1rem;
	font-size: 1.25rem;
	background-color: #666;
	border: medium solid #999;
}

.grid-explicit {
	/* Para indicar que trabajamos con grid */
	display: grid;
	/* Cuadricula de 3 columnas x 3 filas */
	/* grid-template-columns o row me permite definir columnas y filas
		los valores se ingresan separados por espacio y recive cualquier tipo de medida
		1fr = el espacio sobrante
		Los items que queden por fuera de nuestra seleccion ( no estan definidas > 9 items en este ejemplo de 3 * 3)
		las filas tomaran un valor por defecto */
	grid-template-rows: 2rem 20vh 30%;
	grid-template-columns: 50% 100px 1fr;
	/* Grid de 5c * 4f */
	grid-template-rows: repeat(4, auto);
	grid-template-rows: repeat(4, 25%);
	grid-template-columns: repeat(5, 20%);
	grid-template-rows: repeat(4, 1fr);
	grid-template-columns: repeat(5, 1fr);
	/* Grid 4c * 5f */
	grid-template-columns: 20% 30% 30% 20%;
	/* Optimizado */
	grid-template-columns: 20% repeat(2, 30%) 20%;
	grid-template-rows: repeat(5, auto);
	/* Para dar espaciado entre las columnas usamos grid-row/column-gap (esta depreciada) se debe considerar
		el tamaño y se simplifican en grid grap*/
		grid-column-gap: 2rem;
		grid-row-gap: 2rem;
		/* Shorcut primer valor filas y segundo valor columna */
		grid-gap: 4rem 2rem;
		/* Sus nombres actuales son */
		column-gap: 100px;
		row-gap: 1rem;
		gap: 0 3rem;
		gap: 0 0;
}

/* Posicionar el elemento numer 10 */
.grid-explicit .item:nth-child(10){
	color: cyan;
	/* Propiedades que me dice de que lineas a que lineas colocar mi elemento */
	grid-row-start: 2;
	grid-row-end: 3;
	grid-column-start: 2;
	grid-column-end: 3;
	/* Shorcut -> grid-row: grid-row-start / grid-row-end; rid-column: grid-column-start / grid-column-end;*/
	grid-row: 2 / 3;
	grid-column: 3 / 4;
	/* Puede ocupar mas de dos celdas */
	grid-column: 3 / 5;
	/* Shorcut -> grid-row-start / grid-row-end / grid-column-start / grid-column-end */
	grid-area: 2 / 3 / 3 / 5;
}

/* Abarcar ciertos elementos en fila y columna */
.grid-explicit .item:nth-child(12) {
	color: cyan;
	/* Con span le decimos que desde donde esta ocupe el numero de filas o columnas que le indiquemos en este ejemplo 2 */
	grid-row: span 2;
	grid-column: span 3;
}
/* Tambien podemos hacer una mezcla de ellos */
.grid-explicit .item:nth-child(15) {
	color: darkblue;
	grid-row: 1 / span 2;
	grid-column: 1 / span 2;
}

/* Darle nombre a las lineas */
.grid-line-names {
	display: grid;
	/* grid de 3c * 3f */
	grid-template-columns: repeat(3, 1fr);
	grid-template-rows: repeat(3, 1fr);
	grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4];
	grid-template-rows: [linea-r1] 1fr [linea-r2] 1fr [linea-r3] 1fr [linea-r4];
	grid-template-rows: [linea-r1] auto [linea-r2] auto [linea-r3] auto [linea-r4];
}

.grid-line-names .item.item:nth-child(3) {
	color: cyan;
	grid-row: linea-r3 / linea-r4;
	grid-column: linea-c1 / linea-c4;
}

/* Grid areas de 3f * 2c */

.grid-areas {
	display: grid;
	grid-template-columns: 1fr 300px;
	grid-template-rows: 100px 1fr 60px;
	grid-template-rows: 100px repeat(2, 1fr) 60px;
	/* Con el . le indico que esa celda queda vacia */
	grid-template-areas:
		"header header"
		"content sidebar"
		"content ."
		"footer footer";
}

.header {
	/* Para definir un nombre de area, como ya defini el nombre en grid-template-areas lo coloco sin commillas y como lo llame allí */
	grid-area: header;
}

.content {
	/* Para definir un nombre de area, como ya defini el nombre en grid-template-areas lo coloco sin commillas y como lo llame allí */
	grid-area: content;
}

.sidebar {
	/* Para definir un nombre de area, como ya defini el nombre en grid-template-areas lo coloco sin commillas y como lo llame allí */
	grid-area: sidebar;
}

.footer {
	/* Para definir un nombre de area, como ya defini el nombre en grid-template-areas lo coloco sin commillas y como lo llame allí */
	grid-area: footer;
}

/* grid 4c * 3f - para 12 items del 13 al 19 ya no estan en mi grid explicita ej instagram, sirve para contenido dinamico*/
.grid-implicit {
	width: 40%;
	display: grid;
	/* Para que los elementos contenedores compartan el mismo espacio (en la misma linea)*/
	display: inline-grid;
	grid-template-columns: repeat(4, 1fr);
	grid-template-rows: repeat(3, 200px);
	/* Los items que quede en la grid implicita toman el alto de su contenido por que tienen el valor auto*/

}

.grid-flow {
	display: grid;
	/* grid de 5c * 3f */
	grid-template-columns: repeat(5, 1fr);
	grid-template-rows: repeat(3, 150px);
	/* determina el flujo que va a seguir mi cuadricula */
	grid-auto-flow: row;
	/* Define el tamaño de la cuadricula implicita */
	grid-auto-rows: 100px;
	/* Los items se acomodan en columnas y los que quede por fuera de mi grid explicita se generan columnas la grid implicita*/
	/* Se puede pensar como voltear el celuular a horizontal */
	grid-auto-flow: column;
	/* Define el tamaño de la cuadricula implicita */
	grid-auto-columns: 50px;
}

.grid-flow-dense {
	display: grid;
		/* grid de 5c * 4f */
	grid-template-columns: repeat(5, 1fr);
	grid-template-rows: repeat(4, 200px);
	/* Para rellenar los espacios vacios */
	grid-auto-flow: column dense;
	grid-auto-flow: row dense;
}

.grid-flow-dense .item.item:nth-child(9) {
	color: cyan;
	/* Por su ubicacion se desplaza hacia abajo */
	grid-row: span 3;
	grid-column: span 3;
}